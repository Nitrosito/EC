
bug:     formato del fichero elf32-i386


Desensamblado de la sección .init:

0804856c <_init>:
 804856c:	53                   	push   %ebx
 804856d:	83 ec 08             	sub    $0x8,%esp
 8048570:	e8 fb 00 00 00       	call   8048670 <__x86.get_pc_thunk.bx>
 8048575:	81 c3 8b 1a 00 00    	add    $0x1a8b,%ebx
 804857b:	8b 83 f0 ff ff ff    	mov    -0x10(%ebx),%eax
 8048581:	85 c0                	test   %eax,%eax
 8048583:	74 05                	je     804858a <_init+0x1e>
 8048585:	e8 36 00 00 00       	call   80485c0 <__gmon_start__@plt>
 804858a:	83 c4 08             	add    $0x8,%esp
 804858d:	5b                   	pop    %ebx
 804858e:	c3                   	ret    

Desensamblado de la sección .plt:

08048590 <std::ostream::operator<<(int)@plt-0x10>:
 8048590:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048596:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804859c:	00 00                	add    %al,(%eax)
	...

080485a0 <std::ostream::operator<<(int)@plt>:
 80485a0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80485a6:	68 00 00 00 00       	push   $0x0
 80485ab:	e9 e0 ff ff ff       	jmp    8048590 <_init+0x24>

080485b0 <__cxa_atexit@plt>:
 80485b0:	ff 25 10 a0 04 08    	jmp    *0x804a010
 80485b6:	68 08 00 00 00       	push   $0x8
 80485bb:	e9 d0 ff ff ff       	jmp    8048590 <_init+0x24>

080485c0 <__gmon_start__@plt>:
 80485c0:	ff 25 14 a0 04 08    	jmp    *0x804a014
 80485c6:	68 10 00 00 00       	push   $0x10
 80485cb:	e9 c0 ff ff ff       	jmp    8048590 <_init+0x24>

080485d0 <std::ios_base::Init::Init()@plt>:
 80485d0:	ff 25 18 a0 04 08    	jmp    *0x804a018
 80485d6:	68 18 00 00 00       	push   $0x18
 80485db:	e9 b0 ff ff ff       	jmp    8048590 <_init+0x24>

080485e0 <__libc_start_main@plt>:
 80485e0:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 80485e6:	68 20 00 00 00       	push   $0x20
 80485eb:	e9 a0 ff ff ff       	jmp    8048590 <_init+0x24>

080485f0 <std::ios_base::Init::~Init()@plt>:
 80485f0:	ff 25 20 a0 04 08    	jmp    *0x804a020
 80485f6:	68 28 00 00 00       	push   $0x28
 80485fb:	e9 90 ff ff ff       	jmp    8048590 <_init+0x24>

08048600 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
 8048600:	ff 25 24 a0 04 08    	jmp    *0x804a024
 8048606:	68 30 00 00 00       	push   $0x30
 804860b:	e9 80 ff ff ff       	jmp    8048590 <_init+0x24>

08048610 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
 8048610:	ff 25 28 a0 04 08    	jmp    *0x804a028
 8048616:	68 38 00 00 00       	push   $0x38
 804861b:	e9 70 ff ff ff       	jmp    8048590 <_init+0x24>

08048620 <rand@plt>:
 8048620:	ff 25 2c a0 04 08    	jmp    *0x804a02c
 8048626:	68 40 00 00 00       	push   $0x40
 804862b:	e9 60 ff ff ff       	jmp    8048590 <_init+0x24>

08048630 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
 8048630:	ff 25 30 a0 04 08    	jmp    *0x804a030
 8048636:	68 48 00 00 00       	push   $0x48
 804863b:	e9 50 ff ff ff       	jmp    8048590 <_init+0x24>

Desensamblado de la sección .text:

08048640 <_start>:
 8048640:	31 ed                	xor    %ebp,%ebp
 8048642:	5e                   	pop    %esi
 8048643:	89 e1                	mov    %esp,%ecx
 8048645:	83 e4 f0             	and    $0xfffffff0,%esp
 8048648:	50                   	push   %eax
 8048649:	54                   	push   %esp
 804864a:	52                   	push   %edx
 804864b:	68 60 89 04 08       	push   $0x8048960
 8048650:	68 00 89 04 08       	push   $0x8048900
 8048655:	51                   	push   %ecx
 8048656:	56                   	push   %esi
 8048657:	68 80 87 04 08       	push   $0x8048780
 804865c:	e8 7f ff ff ff       	call   80485e0 <__libc_start_main@plt>
 8048661:	f4                   	hlt    
 8048662:	66 90                	xchg   %ax,%ax
 8048664:	66 90                	xchg   %ax,%ax
 8048666:	66 90                	xchg   %ax,%ax
 8048668:	66 90                	xchg   %ax,%ax
 804866a:	66 90                	xchg   %ax,%ax
 804866c:	66 90                	xchg   %ax,%ax
 804866e:	66 90                	xchg   %ax,%ax

08048670 <__x86.get_pc_thunk.bx>:
 8048670:	8b 1c 24             	mov    (%esp),%ebx
 8048673:	c3                   	ret    
 8048674:	66 90                	xchg   %ax,%ax
 8048676:	66 90                	xchg   %ax,%ax
 8048678:	66 90                	xchg   %ax,%ax
 804867a:	66 90                	xchg   %ax,%ax
 804867c:	66 90                	xchg   %ax,%ax
 804867e:	66 90                	xchg   %ax,%ax

08048680 <deregister_tm_clones>:
 8048680:	e8 f7 00 00 00       	call   804877c <__x86.get_pc_thunk.dx>
 8048685:	81 c2 7b 19 00 00    	add    $0x197b,%edx
 804868b:	8d 8a 38 00 00 00    	lea    0x38(%edx),%ecx
 8048691:	8d 82 3b 00 00 00    	lea    0x3b(%edx),%eax
 8048697:	29 c8                	sub    %ecx,%eax
 8048699:	83 f8 06             	cmp    $0x6,%eax
 804869c:	76 17                	jbe    80486b5 <deregister_tm_clones+0x35>
 804869e:	8b 82 f8 ff ff ff    	mov    -0x8(%edx),%eax
 80486a4:	85 c0                	test   %eax,%eax
 80486a6:	74 0d                	je     80486b5 <deregister_tm_clones+0x35>
 80486a8:	55                   	push   %ebp
 80486a9:	89 e5                	mov    %esp,%ebp
 80486ab:	83 ec 14             	sub    $0x14,%esp
 80486ae:	51                   	push   %ecx
 80486af:	ff d0                	call   *%eax
 80486b1:	83 c4 10             	add    $0x10,%esp
 80486b4:	c9                   	leave  
 80486b5:	f3 c3                	repz ret 
 80486b7:	89 f6                	mov    %esi,%esi
 80486b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080486c0 <register_tm_clones>:
 80486c0:	e8 b7 00 00 00       	call   804877c <__x86.get_pc_thunk.dx>
 80486c5:	81 c2 3b 19 00 00    	add    $0x193b,%edx
 80486cb:	55                   	push   %ebp
 80486cc:	8d 8a 38 00 00 00    	lea    0x38(%edx),%ecx
 80486d2:	8d 82 38 00 00 00    	lea    0x38(%edx),%eax
 80486d8:	89 e5                	mov    %esp,%ebp
 80486da:	53                   	push   %ebx
 80486db:	29 c8                	sub    %ecx,%eax
 80486dd:	c1 f8 02             	sar    $0x2,%eax
 80486e0:	83 ec 04             	sub    $0x4,%esp
 80486e3:	89 c3                	mov    %eax,%ebx
 80486e5:	c1 eb 1f             	shr    $0x1f,%ebx
 80486e8:	01 d8                	add    %ebx,%eax
 80486ea:	d1 f8                	sar    %eax
 80486ec:	74 14                	je     8048702 <register_tm_clones+0x42>
 80486ee:	8b 92 fc ff ff ff    	mov    -0x4(%edx),%edx
 80486f4:	85 d2                	test   %edx,%edx
 80486f6:	74 0a                	je     8048702 <register_tm_clones+0x42>
 80486f8:	83 ec 08             	sub    $0x8,%esp
 80486fb:	50                   	push   %eax
 80486fc:	51                   	push   %ecx
 80486fd:	ff d2                	call   *%edx
 80486ff:	83 c4 10             	add    $0x10,%esp
 8048702:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8048705:	c9                   	leave  
 8048706:	c3                   	ret    
 8048707:	89 f6                	mov    %esi,%esi
 8048709:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048710 <__do_global_dtors_aux>:
 8048710:	55                   	push   %ebp
 8048711:	89 e5                	mov    %esp,%ebp
 8048713:	53                   	push   %ebx
 8048714:	e8 57 ff ff ff       	call   8048670 <__x86.get_pc_thunk.bx>
 8048719:	81 c3 e7 18 00 00    	add    $0x18e7,%ebx
 804871f:	83 ec 04             	sub    $0x4,%esp
 8048722:	80 bb cc 00 00 00 00 	cmpb   $0x0,0xcc(%ebx)
 8048729:	75 0c                	jne    8048737 <__do_global_dtors_aux+0x27>
 804872b:	e8 50 ff ff ff       	call   8048680 <deregister_tm_clones>
 8048730:	c6 83 cc 00 00 00 01 	movb   $0x1,0xcc(%ebx)
 8048737:	83 c4 04             	add    $0x4,%esp
 804873a:	5b                   	pop    %ebx
 804873b:	5d                   	pop    %ebp
 804873c:	c3                   	ret    
 804873d:	8d 76 00             	lea    0x0(%esi),%esi

08048740 <frame_dummy>:
 8048740:	e8 37 00 00 00       	call   804877c <__x86.get_pc_thunk.dx>
 8048745:	81 c2 bb 18 00 00    	add    $0x18bb,%edx
 804874b:	8d 82 ec fe ff ff    	lea    -0x114(%edx),%eax
 8048751:	8b 08                	mov    (%eax),%ecx
 8048753:	85 c9                	test   %ecx,%ecx
 8048755:	75 09                	jne    8048760 <frame_dummy+0x20>
 8048757:	e9 64 ff ff ff       	jmp    80486c0 <register_tm_clones>
 804875c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048760:	8b 92 f4 ff ff ff    	mov    -0xc(%edx),%edx
 8048766:	85 d2                	test   %edx,%edx
 8048768:	74 ed                	je     8048757 <frame_dummy+0x17>
 804876a:	55                   	push   %ebp
 804876b:	89 e5                	mov    %esp,%ebp
 804876d:	83 ec 14             	sub    $0x14,%esp
 8048770:	50                   	push   %eax
 8048771:	ff d2                	call   *%edx
 8048773:	83 c4 10             	add    $0x10,%esp
 8048776:	c9                   	leave  
 8048777:	e9 44 ff ff ff       	jmp    80486c0 <register_tm_clones>

0804877c <__x86.get_pc_thunk.dx>:
 804877c:	8b 14 24             	mov    (%esp),%edx
 804877f:	c3                   	ret    

08048780 <main>:
 8048780:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048784:	83 e4 f0             	and    $0xfffffff0,%esp
 8048787:	ff 71 fc             	pushl  -0x4(%ecx)
 804878a:	55                   	push   %ebp
 804878b:	89 e5                	mov    %esp,%ebp
 804878d:	53                   	push   %ebx
 804878e:	51                   	push   %ecx
 804878f:	83 ec 10             	sub    $0x10,%esp
 8048792:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8048799:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
 804879d:	0f 8f e9 00 00 00    	jg     804888c <main+0x10c>
 80487a3:	e8 78 fe ff ff       	call   8048620 <rand@plt>
 80487a8:	89 c1                	mov    %eax,%ecx
 80487aa:	ba 67 66 66 66       	mov    $0x66666667,%edx
 80487af:	89 c8                	mov    %ecx,%eax
 80487b1:	f7 ea                	imul   %edx
 80487b3:	c1 fa 02             	sar    $0x2,%edx
 80487b6:	89 c8                	mov    %ecx,%eax
 80487b8:	c1 f8 1f             	sar    $0x1f,%eax
 80487bb:	29 c2                	sub    %eax,%edx
 80487bd:	89 d0                	mov    %edx,%eax
 80487bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
 80487c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
 80487c5:	89 d0                	mov    %edx,%eax
 80487c7:	c1 e0 02             	shl    $0x2,%eax
 80487ca:	01 d0                	add    %edx,%eax
 80487cc:	01 c0                	add    %eax,%eax
 80487ce:	29 c1                	sub    %eax,%ecx
 80487d0:	89 c8                	mov    %ecx,%eax
 80487d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
 80487d5:	e8 46 fe ff ff       	call   8048620 <rand@plt>
 80487da:	89 c1                	mov    %eax,%ecx
 80487dc:	ba 67 66 66 66       	mov    $0x66666667,%edx
 80487e1:	89 c8                	mov    %ecx,%eax
 80487e3:	f7 ea                	imul   %edx
 80487e5:	c1 fa 02             	sar    $0x2,%edx
 80487e8:	89 c8                	mov    %ecx,%eax
 80487ea:	c1 f8 1f             	sar    $0x1f,%eax
 80487ed:	29 c2                	sub    %eax,%edx
 80487ef:	89 d0                	mov    %edx,%eax
 80487f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 80487f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
 80487f7:	89 d0                	mov    %edx,%eax
 80487f9:	c1 e0 02             	shl    $0x2,%eax
 80487fc:	01 d0                	add    %edx,%eax
 80487fe:	01 c0                	add    %eax,%eax
 8048800:	29 c1                	sub    %eax,%ecx
 8048802:	89 c8                	mov    %ecx,%eax
 8048804:	89 45 ec             	mov    %eax,-0x14(%ebp)
 8048807:	8b 45 f0             	mov    -0x10(%ebp),%eax
 804880a:	99                   	cltd   
 804880b:	f7 7d ec             	idivl  -0x14(%ebp)
 804880e:	89 c3                	mov    %eax,%ebx
 8048810:	83 ec 08             	sub    $0x8,%esp
 8048813:	68 85 89 04 08       	push   $0x8048985
 8048818:	68 40 a0 04 08       	push   $0x804a040
 804881d:	e8 de fd ff ff       	call   8048600 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048822:	83 c4 10             	add    $0x10,%esp
 8048825:	83 ec 08             	sub    $0x8,%esp
 8048828:	ff 75 f0             	pushl  -0x10(%ebp)
 804882b:	50                   	push   %eax
 804882c:	e8 6f fd ff ff       	call   80485a0 <std::ostream::operator<<(int)@plt>
 8048831:	83 c4 10             	add    $0x10,%esp
 8048834:	83 ec 08             	sub    $0x8,%esp
 8048837:	68 8a 89 04 08       	push   $0x804898a
 804883c:	50                   	push   %eax
 804883d:	e8 be fd ff ff       	call   8048600 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048842:	83 c4 10             	add    $0x10,%esp
 8048845:	83 ec 08             	sub    $0x8,%esp
 8048848:	ff 75 ec             	pushl  -0x14(%ebp)
 804884b:	50                   	push   %eax
 804884c:	e8 4f fd ff ff       	call   80485a0 <std::ostream::operator<<(int)@plt>
 8048851:	83 c4 10             	add    $0x10,%esp
 8048854:	83 ec 08             	sub    $0x8,%esp
 8048857:	68 91 89 04 08       	push   $0x8048991
 804885c:	50                   	push   %eax
 804885d:	e8 9e fd ff ff       	call   8048600 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048862:	83 c4 10             	add    $0x10,%esp
 8048865:	83 ec 08             	sub    $0x8,%esp
 8048868:	53                   	push   %ebx
 8048869:	50                   	push   %eax
 804886a:	e8 31 fd ff ff       	call   80485a0 <std::ostream::operator<<(int)@plt>
 804886f:	83 c4 10             	add    $0x10,%esp
 8048872:	83 ec 08             	sub    $0x8,%esp
 8048875:	68 30 86 04 08       	push   $0x8048630
 804887a:	50                   	push   %eax
 804887b:	e8 90 fd ff ff       	call   8048610 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
 8048880:	83 c4 10             	add    $0x10,%esp
 8048883:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 8048887:	e9 0d ff ff ff       	jmp    8048799 <main+0x19>
 804888c:	b8 00 00 00 00       	mov    $0x0,%eax
 8048891:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8048894:	59                   	pop    %ecx
 8048895:	5b                   	pop    %ebx
 8048896:	5d                   	pop    %ebp
 8048897:	8d 61 fc             	lea    -0x4(%ecx),%esp
 804889a:	c3                   	ret    

0804889b <__static_initialization_and_destruction_0(int, int)>:
 804889b:	55                   	push   %ebp
 804889c:	89 e5                	mov    %esp,%ebp
 804889e:	83 ec 08             	sub    $0x8,%esp
 80488a1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 80488a5:	75 33                	jne    80488da <__static_initialization_and_destruction_0(int, int)+0x3f>
 80488a7:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
 80488ae:	75 2a                	jne    80488da <__static_initialization_and_destruction_0(int, int)+0x3f>
 80488b0:	83 ec 0c             	sub    $0xc,%esp
 80488b3:	68 cd a0 04 08       	push   $0x804a0cd
 80488b8:	e8 13 fd ff ff       	call   80485d0 <std::ios_base::Init::Init()@plt>
 80488bd:	83 c4 10             	add    $0x10,%esp
 80488c0:	83 ec 04             	sub    $0x4,%esp
 80488c3:	68 80 89 04 08       	push   $0x8048980
 80488c8:	68 cd a0 04 08       	push   $0x804a0cd
 80488cd:	68 f0 85 04 08       	push   $0x80485f0
 80488d2:	e8 d9 fc ff ff       	call   80485b0 <__cxa_atexit@plt>
 80488d7:	83 c4 10             	add    $0x10,%esp
 80488da:	90                   	nop
 80488db:	c9                   	leave  
 80488dc:	c3                   	ret    

080488dd <_GLOBAL__sub_I_main>:
 80488dd:	55                   	push   %ebp
 80488de:	89 e5                	mov    %esp,%ebp
 80488e0:	83 ec 08             	sub    $0x8,%esp
 80488e3:	83 ec 08             	sub    $0x8,%esp
 80488e6:	68 ff ff 00 00       	push   $0xffff
 80488eb:	6a 01                	push   $0x1
 80488ed:	e8 a9 ff ff ff       	call   804889b <__static_initialization_and_destruction_0(int, int)>
 80488f2:	83 c4 10             	add    $0x10,%esp
 80488f5:	c9                   	leave  
 80488f6:	c3                   	ret    
 80488f7:	66 90                	xchg   %ax,%ax
 80488f9:	66 90                	xchg   %ax,%ax
 80488fb:	66 90                	xchg   %ax,%ax
 80488fd:	66 90                	xchg   %ax,%ax
 80488ff:	90                   	nop

08048900 <__libc_csu_init>:
 8048900:	55                   	push   %ebp
 8048901:	57                   	push   %edi
 8048902:	56                   	push   %esi
 8048903:	53                   	push   %ebx
 8048904:	e8 67 fd ff ff       	call   8048670 <__x86.get_pc_thunk.bx>
 8048909:	81 c3 f7 16 00 00    	add    $0x16f7,%ebx
 804890f:	83 ec 0c             	sub    $0xc,%esp
 8048912:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 8048916:	8d b3 e8 fe ff ff    	lea    -0x118(%ebx),%esi
 804891c:	e8 4b fc ff ff       	call   804856c <_init>
 8048921:	8d 83 e0 fe ff ff    	lea    -0x120(%ebx),%eax
 8048927:	29 c6                	sub    %eax,%esi
 8048929:	c1 fe 02             	sar    $0x2,%esi
 804892c:	85 f6                	test   %esi,%esi
 804892e:	74 25                	je     8048955 <__libc_csu_init+0x55>
 8048930:	31 ff                	xor    %edi,%edi
 8048932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048938:	83 ec 04             	sub    $0x4,%esp
 804893b:	ff 74 24 2c          	pushl  0x2c(%esp)
 804893f:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048943:	55                   	push   %ebp
 8048944:	ff 94 bb e0 fe ff ff 	call   *-0x120(%ebx,%edi,4)
 804894b:	83 c7 01             	add    $0x1,%edi
 804894e:	83 c4 10             	add    $0x10,%esp
 8048951:	39 f7                	cmp    %esi,%edi
 8048953:	75 e3                	jne    8048938 <__libc_csu_init+0x38>
 8048955:	83 c4 0c             	add    $0xc,%esp
 8048958:	5b                   	pop    %ebx
 8048959:	5e                   	pop    %esi
 804895a:	5f                   	pop    %edi
 804895b:	5d                   	pop    %ebp
 804895c:	c3                   	ret    
 804895d:	8d 76 00             	lea    0x0(%esi),%esi

08048960 <__libc_csu_fini>:
 8048960:	f3 c3                	repz ret 

Desensamblado de la sección .fini:

08048964 <_fini>:
 8048964:	53                   	push   %ebx
 8048965:	83 ec 08             	sub    $0x8,%esp
 8048968:	e8 03 fd ff ff       	call   8048670 <__x86.get_pc_thunk.bx>
 804896d:	81 c3 93 16 00 00    	add    $0x1693,%ebx
 8048973:	83 c4 08             	add    $0x8,%esp
 8048976:	5b                   	pop    %ebx
 8048977:	c3                   	ret    
